"""
--- Part Two ---

A rope snaps! Suddenly, the river is getting a lot closer than you remember. The bridge is still there, but some of the ropes that broke are now whipping toward you as you fall through the air!

The ropes are moving too quickly to grab; you only have a few seconds to choose how to arch your body to avoid being hit. Fortunately, your simulation can be extended to support longer ropes.

Rather than two knots, you now must simulate a rope consisting of ten knots. One knot is still the head of the rope and moves according to the series of motions. Each knot further down the rope follows the knot in front of it using the same rules as before.

Using the same series of motions as the above example, but with the knots marked H, 1, 2, ..., 9, the motions now occur as follows:

== Initial State ==

......
......
......
......
H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)

== R 4 ==

......
......
......
......
1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)

......
......
......
......
21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)

......
......
......
......
321H..  (3 covers 4, 5, 6, 7, 8, 9, s)

......
......
......
......
4321H.  (4 covers 5, 6, 7, 8, 9, s)

== U 4 ==

......
......
......
....H.
4321..  (4 covers 5, 6, 7, 8, 9, s)

......
......
....H.
.4321.
5.....  (5 covers 6, 7, 8, 9, s)

......
....H.
....1.
.432..
5.....  (5 covers 6, 7, 8, 9, s)

....H.
....1.
..432.
.5....
6.....  (6 covers 7, 8, 9, s)

== L 3 ==

...H..
....1.
..432.
.5....
6.....  (6 covers 7, 8, 9, s)

..H1..
...2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

.H1...
...2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== D 1 ==

..1...
.H.2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== R 4 ==

..1...
..H2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

..1...
...H..  (H covers 2)
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

......
...1H.  (1 covers 2)
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

......
...21H
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== D 1 ==

......
...21.
..43.H
.5....
6.....  (6 covers 7, 8, 9, s)

== L 5 ==

......
...21.
..43H.
.5....
6.....  (6 covers 7, 8, 9, s)

......
...21.
..4H..  (H covers 3)
.5....
6.....  (6 covers 7, 8, 9, s)

......
...2..
..H1..  (H covers 4; 1 covers 3)
.5....
6.....  (6 covers 7, 8, 9, s)

......
...2..
.H13..  (1 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

......
......
H123..  (2 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

== R 2 ==

......
......
.H23..  (H covers 1; 2 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

......
......
.1H3..  (H covers 2, 4)
.5....
6.....  (6 covers 7, 8, 9, s)
Now, you need to keep track of the positions the new tail, 9, visits. In this example, the tail never moves, and so it only visits 1 position. However, be careful: more types of motion are possible than before, so you might want to visually compare your simulated rope to the one above.

Here's a larger example:

R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20
These motions occur as follows (individual steps are not shown):

== Initial State ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
..........................
..........................
..........................
..........................
..........................

== R 5 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........54321H.........  (5 covers 6, 7, 8, 9, s)
..........................
..........................
..........................
..........................
..........................

== U 8 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
................H.........
................1.........
................2.........
................3.........
...............54.........
..............6...........
.............7............
............8.............
...........9..............  (9 covers s)
..........................
..........................
..........................
..........................
..........................

== L 8 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
........H1234.............
............5.............
............6.............
............7.............
............8.............
............9.............
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== D 3 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
.........2345.............
........1...6.............
........H...7.............
............8.............
............9.............
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== R 17 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
................987654321H
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== D 10 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........s.........98765
.........................4
.........................3
.........................2
.........................1
.........................H

== L 25 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
H123456789................

== U 20 ==

H.........................
1.........................
2.........................
3.........................
4.........................
5.........................
6.........................
7.........................
8.........................
9.........................
..........................
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

Now, the tail (9) visits 36 positions (including s) at least once:

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
#.........................
#.............###.........
#............#...#........
.#..........#.....#.......
..#..........#.....#......
...#........#.......#.....
....#......s.........#....
.....#..............#.....
......#............#......
.......#..........#.......
........#........#........
.........########.........
Simulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?
"""
import sys


class Knot:
    def __init__(self, x, y, token):
        self.token = token
        self.x = x
        self.y = y

    def adjacent(self, a):
        if self.x == a.x:
            return abs(self.y - a.y) <= 1
        if self.y == a.y:
            return abs(self.x - a.x) <= 1
        return abs(self.y - a.y) == 1 and abs(self.x - a.x) == 1

    def same_row(self, a):
        return self.y == a.y

    def same_column(self, a):
        return self.x == a.x

    def move_horizontal(self, direction):
        self.x += 1 * direction

    @staticmethod
    def horizontal_adjust(h, t, direction, positions, update):
        while not h.adjacent(t):
            if not h.same_row(t) and update:
                t.y = h.y
                positions.append((t.x, t.y))
                continue
            t.x += 1 * direction
            if update:
                positions.append((t.x, t.y))

    def move_vertical(self, direction):
        self.y += 1 * direction

    @staticmethod
    def vertical_adjust(h, t, direction, positions, update):
        while not h.adjacent(t):
            if not h.same_column(t) and update:
                t.x = h.x
                positions.append((t.x, t.y))
                continue
            t.y += 1 * direction
            if update:
                positions.append((t.x, t.y))


class Rope:
    def __init__(self):
        self.init_state = (MAX_Y // 2, MAX_X // 2)
        init_x, init_y = self.init_state
        self.num_knots = 10
        self.knots = []
        for i in range(self.num_knots):
            if i == self.num_knots - 1:
                token = "T"
            elif i == 0:
                token = "H"
            else:
                token = str(i)
            self.knots.append(Knot(x=init_x, y=init_y, token=token))
        self.positions = [self.init_state]

    def move_horizontal(self, n, direction):
        for _ in range(int(n)):
            self.knots[0].move_horizontal(direction)
            for i in range(1, self.num_knots):
                update = i == self.num_knots - 1
                Knot.horizontal_adjust(
                    self.knots[i - 1], self.knots[i], direction, self.positions, update
                )

    def move_vertical(self, n, direction):
        for _ in range(int(n)):
            self.knots[0].move_vertical(direction)
            for i in range(1, self.num_knots):
                update = i == self.num_knots - 1
                Knot.vertical_adjust(
                    self.knots[i - 1], self.knots[i], direction, self.positions, update
                )


def show_table():
    table = [["." for _ in range(MAX_X)] for _ in range(MAX_Y)]
    for x, y in rope.positions:
        table[y][x] = "#"
    x, y = rope.init_state
    table[y][x] = "s"
    for i in range(rope.num_knots - 1, -1, -1):
        knot = rope.knots[i]
        table[knot.y][knot.x] = knot.token
    for row in table:
        print("".join(row))


MAX_X = 50
MAX_Y = 50
screen = False
pause = False
if len(sys.argv) > 1:
    if int(sys.argv[1]) >= 1:
        screen = True
    if int(sys.argv[1]) >= 2:
        pause = True
with open("sample.txt") as f:
    data = f.read().splitlines()
rope = Rope()
for movement in data:
    if screen:
        show_table()
    if pause:
        input()
    match movement.split():
        case ("R", n):
            rope.move_horizontal(n, 1)
        case ("L", n):
            rope.move_horizontal(n, -1)
        case ("U", n):
            rope.move_vertical(n, -1)
        case ("D", n):
            rope.move_vertical(n, 1)
        case _:
            raise ValueError("Invalid movement")

print("Answer 92:", len(set(rope.positions)))
